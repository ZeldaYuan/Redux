{"ast":null,"code":"var _jsxFileName = \"/Users/Zelda/Redux/Pixabay/2112/src/Pages/SearchInputForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport * as Yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SearchInputForm() {\n  _s();\n\n  const {\n    register,\n    setValue,\n    setError,\n    formState: {\n      errors\n    },\n    handleSubmit,\n    reset\n  } = useForm();\n  const [searchtitle, setSearchtitle] = useState('');\n  const YupForm = Yup.object().shape({\n    searchtitle: Yup.string().required('This value is required').min(3, 'Proivde atleast 3 chars')\n  });\n  const resolverForm = {\n    resolver: yupResolver(YupForm)\n  };\n  useEffect(() => {\n    setSearchtitle('');\n  }, [searchtitle]);\n\n  const onSubmit = (data, e) => {\n    console.log('datatitle', data.searchtitle);\n    e.target.reset(); // reset after form submit\n\n    setSearchtitle('');\n    return false;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"search\",\n      onSubmit: handleSubmit(onSubmit),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"field\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Search Pictures...\",\n          ...register('searchtitle', {\n            required: 'Title is required',\n            maxLength: 30\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 7\n        }, this), errors.searchtitle && errors.searchtitle.type === \"required\" && /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"This is required\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 72\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"search icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }, this), \"onClick=\", () => reset({\n          searchtitle: ''\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 7\n  }, this);\n}\n\n_s(SearchInputForm, \"k7WkmR18xzoP9I8SBnERpXz8Puo=\", false, function () {\n  return [useForm];\n});\n\n_c = SearchInputForm;\nexport default SearchInputForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchInputForm\");","map":{"version":3,"sources":["/Users/Zelda/Redux/Pixabay/2112/src/Pages/SearchInputForm.js"],"names":["React","useState","useEffect","useForm","Yup","yupResolver","SearchInputForm","register","setValue","setError","formState","errors","handleSubmit","reset","searchtitle","setSearchtitle","YupForm","object","shape","string","required","min","resolverForm","resolver","onSubmit","data","e","console","log","target","maxLength","type"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,QAAd,EAAuBC,SAAvB,QAAuC,OAAvC;AACA,SAAQC,OAAR,QAAsB,iBAAtB;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SAASC,WAAT,QAA4B,yBAA5B;;;AAEA,SAASC,eAAT,GAA4B;AAAA;;AAC5B,QAAM;AAACC,IAAAA,QAAD;AAAUC,IAAAA,QAAV;AAAmBC,IAAAA,QAAnB;AAA4BC,IAAAA,SAAS,EAAE;AAAEC,MAAAA;AAAF,KAAvC;AAAkDC,IAAAA,YAAlD;AAA+DC,IAAAA;AAA/D,MAAwEV,OAAO,EAArF;AACA,QAAM,CAACW,WAAD,EAAaC,cAAb,IAA6Bd,QAAQ,CAAC,EAAD,CAA3C;AACA,QAAMe,OAAO,GAAGZ,GAAG,CAACa,MAAJ,GAAaC,KAAb,CAAmB;AAC/BJ,IAAAA,WAAW,EAAEV,GAAG,CAACe,MAAJ,GACVC,QADU,CACD,wBADC,EAEVC,GAFU,CAEN,CAFM,EAEH,yBAFG;AADkB,GAAnB,CAAhB;AAKE,QAAMC,YAAY,GAAG;AAAEC,IAAAA,QAAQ,EAAElB,WAAW,CAACW,OAAD;AAAvB,GAArB;AAEFd,EAAAA,SAAS,CAAC,MAAM;AACZa,IAAAA,cAAc,CAAC,EAAD,CAAd;AACD,GAFM,EAEJ,CAACD,WAAD,CAFI,CAAT;;AAIA,QAAMU,QAAQ,GAAG,CAACC,IAAD,EAAOC,CAAP,KAAa;AAC3BC,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAwBH,IAAI,CAACX,WAA7B;AACAY,IAAAA,CAAC,CAACG,MAAF,CAAShB,KAAT,GAF2B,CAET;;AAClBE,IAAAA,cAAc,CAAC,EAAD,CAAd;AAEC,WAAO,KAAP;AAED,GAPH;;AAQI,sBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,2BAEA;AAAM,MAAA,SAAS,EAAC,QAAhB;AAAyB,MAAA,QAAQ,EAAEH,YAAY,CAACY,QAAD,CAA/C;AAAA,8BACA;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA,gCACA;AACI,UAAA,IAAI,EAAC,MADT;AAEI,UAAA,WAAW,EAAC,oBAFhB;AAAA,aAGOjB,QAAQ,CAAC,aAAD,EAAgB;AAAEa,YAAAA,QAAQ,EAAE,mBAAZ;AAAiCU,YAAAA,SAAS,EAAE;AAA5C,WAAhB;AAHf;AAAA;AAAA;AAAA;AAAA,gBADA,EAOCnB,MAAM,CAACG,WAAP,IAAsBH,MAAM,CAACG,WAAP,CAAmBiB,IAAnB,KAA4B,UAAlD,iBAAgE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAPjE;AAAA;AAAA;AAAA;AAAA;AAAA,cADA,eAUI;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA,gCACE;AAAG,UAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,gBADF,cAEW,MACPlB,KAAK,CAAC;AACJC,UAAAA,WAAW,EAAE;AADT,SAAD,CAHT;AAAA;AAAA;AAAA;AAAA;AAAA,cAVJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA,UADF;AAwBD;;GA9CMR,e;UACqEH,O;;;KADrEG,e;AA+CT,eAAeA,eAAf","sourcesContent":["import React,{useState,useEffect} from 'react';\nimport {useForm} from 'react-hook-form';\nimport * as Yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup'\n\nfunction SearchInputForm () {\nconst {register,setValue,setError,formState: { errors },handleSubmit,reset} = useForm();\nconst [searchtitle,setSearchtitle]=useState('');\nconst YupForm = Yup.object().shape({\n    searchtitle: Yup.string()\n      .required('This value is required')\n      .min(3, 'Proivde atleast 3 chars'),\n  })\n  const resolverForm = { resolver: yupResolver(YupForm)}\n\nuseEffect(() => {\n    setSearchtitle('')\n  }, [searchtitle])\n\nconst onSubmit = (data, e) => {\n   console.log('datatitle',data.searchtitle);\n   e.target.reset(); // reset after form submit\n   setSearchtitle('');\n\n    return false;\n\n  };\n    return (\n      <div className='flex'>\n\n      <form className='search' onSubmit={handleSubmit(onSubmit)}>\n      <div className=\"field\">\n      <input\n          type='text'\n          placeholder='Search Pictures...'\n         {...register('searchtitle', { required: 'Title is required', maxLength: 30 })}\n      />\n\n      {errors.searchtitle && errors.searchtitle.type === \"required\" && <span>This is required</span>}\n      </div>\n          <button type='submit'>\n            <i className='search icon'></i>\n            onClick={() =>\n              reset({\n                searchtitle: ''\n              })\n            }\n          </button>\n          </form>\n      </div>\n    )\n  }\nexport default SearchInputForm;\n"]},"metadata":{},"sourceType":"module"}