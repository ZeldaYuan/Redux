{"ast":null,"code":"import apiClient from '../apiClient';\nexport const searchRequest = () => ({\n  type: 'SEARCH_REQUEST'\n});\nexport const searchSuccess = result => ({\n  type: 'SEARCH_SUCCESS',\n  result\n});\nexport const searchFailure = error => ({\n  type: 'SEARCH_FAILURE',\n  error\n});\nexport function search(searchtitle, pending) {\n  return dispatch => {\n    dispatch(searchRequest());\n\n    try {\n      apiClient.query(updatedPageNo, searchtitle).then(response => {\n        dispatch(searchSuccess(response));\n\n        pending: false; //Add for add more pages\n\n      });\n    } catch (error) {\n      dispatch(searchFailure(error));\n\n      pending: false; //Add for add more pages\n\n    }\n\n    ;\n  };\n}","map":{"version":3,"sources":["/Users/Zelda/Redux/Pixabay/2112/src/actions/searchActions.js"],"names":["apiClient","searchRequest","type","searchSuccess","result","searchFailure","error","search","searchtitle","pending","dispatch","query","updatedPageNo","then","response"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,cAAtB;AAEA,OAAO,MAAMC,aAAa,GAAG,OAAO;AAClCC,EAAAA,IAAI,EAAE;AAD4B,CAAP,CAAtB;AAGP,OAAO,MAAMC,aAAa,GAAIC,MAAD,KAAa;AACxCF,EAAAA,IAAI,EAAE,gBADkC;AAChBE,EAAAA;AADgB,CAAb,CAAtB;AAGP,OAAO,MAAMC,aAAa,GAAIC,KAAD,KAAY;AACvCJ,EAAAA,IAAI,EAAE,gBADiC;AACfI,EAAAA;AADe,CAAZ,CAAtB;AAIP,OAAO,SAASC,MAAT,CAAgBC,WAAhB,EAA4BC,OAA5B,EAAoC;AACzC,SAAQC,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACT,aAAa,EAAd,CAAR;;AACA,QAAI;AAACD,MAAAA,SAAS,CAACW,KAAV,CAAgBC,aAAhB,EAA8BJ,WAA9B,EACAK,IADA,CACKC,QAAQ,IAAI;AAChBJ,QAAAA,QAAQ,CAACP,aAAa,CAACW,QAAD,CAAd,CAAR;;AACAL,QAAAA,OAAO,EAAC,MAFQ,CAEA;;AACjB,OAJA;AAIE,KAJP,CAIQ,OAAOH,KAAP,EAAc;AACpBI,MAAAA,QAAQ,CAACL,aAAa,CAACC,KAAD,CAAd,CAAR;;AACAG,MAAAA,OAAO,EAAC,MAFY,CAEJ;;AACjB;;AAAA;AACD,GAVF;AAWA","sourcesContent":["import apiClient from '../apiClient';\n\nexport const searchRequest = () => ({\n  type: 'SEARCH_REQUEST'\n});\nexport const searchSuccess = (result) => ({\n  type: 'SEARCH_SUCCESS', result\n});\nexport const searchFailure = (error) => ({\n  type: 'SEARCH_FAILURE', error\n});\n\nexport function search(searchtitle,pending){\n  return (dispatch) => {\n    dispatch(searchRequest());\n    try {apiClient.query(updatedPageNo,searchtitle)\n        .then(response => {\n          dispatch(searchSuccess(response));\n          pending:false;  //Add for add more pages\n        })} catch (error) {\n      dispatch(searchFailure(error));\n      pending:false;  //Add for add more pages\n    };\n   }\n }\n"]},"metadata":{},"sourceType":"module"}