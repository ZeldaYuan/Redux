{"ast":null,"code":"var _jsxFileName = \"/Users/Zelda/Redux/Pixabay/2112/src/Pages/SearchInputForm.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { INPUT_CHANGE, SEARCHFORM_SUBMIT } from '../actions/actionTypes';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SearchInputForm = props => {\n  let {\n    inputValue,\n    inputChange,\n    onFormSubmit,\n    placeholder\n  } = props;\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"search\",\n    onSubmit: onFormSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"title\",\n        className: props.error ? 'error' : '',\n        name: \"title\",\n        type: \"text\",\n        value: inputValue.title,\n        placeholder: placeholder,\n        onChange: inputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"search icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: this.state.error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this);\n};\n/*class SearchInputForm extends React.Component {\n  state = {\n    title: '',\n    error: '',\n  }\n\n/*Search input title change action*/\n\n/*  onInputChange(e){\n    const action = {\n       type:INPUT_CHANGE,\n       title: e.target.value\n     }\n     store.dispatch(action)\n   }\n\n  onFormSubmit = (event) => {\n    event.preventDefault();\n    const title = this.state.title;\n    const error = this.validate(title);\n    this.setState({ error });\n\n    if (error.length > 0) return;\n    this.props.onSubmit(title);\n    this.setState({ title: '', error: '' });\n  }\n\n  validate = (title) => {\n    if (title.trim().length === 0) return 'Title is required!';\n    return '';\n  }\n\n  render() {\n    return (\n      <form className='search' onSubmit={this.onFormSubmit}>\n        <div className='flex'>\n          <input\n            id='title'\n            className={ this.state.error ? 'error' : '' }\n            name='title'\n            type='text'\n            value={this.state.title}\n            placeholder={this.props.placeholder}\n            onChange={this.onInputChange}\n          />\n          <button type='submit'>\n            <i className='search icon'></i>\n          </button>\n        </div>\n        <p className='error'>{ this.state.error }</p>\n      </form>\n    )\n  }\n} */\n\n\n_c = SearchInputForm;\n\nconst stateToProps = state => {\n  return {\n    inputValue: state.inputValue //Get title input state from store\n\n  };\n};\n\nconst dispatchToProps = dispatch => {\n  return {\n    inputChange(e) {\n      let action = {\n        type: INPUT_CHANGE,\n        value: e.target.value\n      };\n      dispatch(action);\n    },\n\n    onFormSubmit(event) {\n      let action = {\n        type: SEARCHFORM_SUBMIT,\n        title: this.inputValue.title\n      };\n      dispatch(action);\n      console.log('888');\n    }\n\n  };\n};\n\nexport default connect(stateToProps, dispatchToProps)(SearchInputForm);\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchInputForm\");","map":{"version":3,"sources":["/Users/Zelda/Redux/Pixabay/2112/src/Pages/SearchInputForm.js"],"names":["React","connect","INPUT_CHANGE","SEARCHFORM_SUBMIT","SearchInputForm","props","inputValue","inputChange","onFormSubmit","placeholder","error","title","state","stateToProps","dispatchToProps","dispatch","e","action","type","value","target","event","console","log"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,YAAR,EAAqBC,iBAArB,QAA4C,wBAA5C;;;AAEA,MAAMC,eAAe,GAAIC,KAAD,IAAS;AAC/B,MAAI;AAACC,IAAAA,UAAD;AAAYC,IAAAA,WAAZ;AAAwBC,IAAAA,YAAxB;AAAqCC,IAAAA;AAArC,MAAoDJ,KAAxD;AACA,sBACE;AAAM,IAAA,SAAS,EAAC,QAAhB;AAAyB,IAAA,QAAQ,EAAEG,YAAnC;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,8BACE;AACE,QAAA,EAAE,EAAC,OADL;AAEE,QAAA,SAAS,EAAGH,KAAK,CAACK,KAAN,GAAc,OAAd,GAAwB,EAFtC;AAGE,QAAA,IAAI,EAAC,OAHP;AAIE,QAAA,IAAI,EAAC,MAJP;AAKE,QAAA,KAAK,EAAEJ,UAAU,CAACK,KALpB;AAME,QAAA,WAAW,EAAEF,WANf;AAOE,QAAA,QAAQ,EAAEF;AAPZ;AAAA;AAAA;AAAA;AAAA,cADF,eAUE;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA,+BACE;AAAG,UAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAVF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAeE;AAAG,MAAA,SAAS,EAAC,OAAb;AAAA,gBAAuB,KAAKK,KAAL,CAAWF;AAAlC;AAAA;AAAA;AAAA;AAAA,YAfF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD,CArBD;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;KA1EMN,e;;AA4EN,MAAMS,YAAY,GAAID,KAAD,IAAS;AAC5B,SAAM;AACJN,IAAAA,UAAU,EAACM,KAAK,CAACN,UADb,CAC0B;;AAD1B,GAAN;AAGD,CAJD;;AAMA,MAAMQ,eAAe,GAAIC,QAAD,IAAY;AAClC,SAAO;AACLR,IAAAA,WAAW,CAACS,CAAD,EAAG;AACZ,UAAIC,MAAM,GAAG;AACXC,QAAAA,IAAI,EAAEhB,YADK;AAEXiB,QAAAA,KAAK,EAAEH,CAAC,CAACI,MAAF,CAASD;AAFL,OAAb;AAIAJ,MAAAA,QAAQ,CAACE,MAAD,CAAR;AACD,KAPI;;AAQLT,IAAAA,YAAY,CAACa,KAAD,EAAQ;AAClB,UAAIJ,MAAM,GAAG;AACXC,QAAAA,IAAI,EAAEf,iBADK;AAEXQ,QAAAA,KAAK,EAAC,KAAKL,UAAL,CAAgBK;AAFX,OAAb;AAKEI,MAAAA,QAAQ,CAACE,MAAD,CAAR;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACH;;AAhBI,GAAP;AAkBD,CAnBD;;AAqBA,eAAetB,OAAO,CAACY,YAAD,EAAcC,eAAd,CAAP,CAAsCV,eAAtC,CAAf","sourcesContent":["import React from 'react';\n\nimport {connect} from 'react-redux';\nimport {INPUT_CHANGE,SEARCHFORM_SUBMIT}from '../actions/actionTypes'\n\nconst SearchInputForm = (props)=>{\n  let {inputValue,inputChange,onFormSubmit,placeholder} = props\n  return (\n    <form className='search' onSubmit={onFormSubmit}>\n      <div className='flex'>\n        <input\n          id='title'\n          className={ props.error ? 'error' : '' }\n          name='title'\n          type='text'\n          value={inputValue.title}\n          placeholder={placeholder}\n          onChange={inputChange}\n        />\n        <button type='submit'>\n          <i className='search icon'></i>\n        </button>\n      </div>\n      <p className='error'>{ this.state.error }</p>\n    </form>\n  )\n}\n/*class SearchInputForm extends React.Component {\n  state = {\n    title: '',\n    error: '',\n  }\n\n/*Search input title change action*/\n/*  onInputChange(e){\n    const action = {\n       type:INPUT_CHANGE,\n       title: e.target.value\n     }\n     store.dispatch(action)\n   }\n\n  onFormSubmit = (event) => {\n    event.preventDefault();\n    const title = this.state.title;\n    const error = this.validate(title);\n    this.setState({ error });\n\n    if (error.length > 0) return;\n    this.props.onSubmit(title);\n    this.setState({ title: '', error: '' });\n  }\n\n  validate = (title) => {\n    if (title.trim().length === 0) return 'Title is required!';\n    return '';\n  }\n\n  render() {\n    return (\n      <form className='search' onSubmit={this.onFormSubmit}>\n        <div className='flex'>\n          <input\n            id='title'\n            className={ this.state.error ? 'error' : '' }\n            name='title'\n            type='text'\n            value={this.state.title}\n            placeholder={this.props.placeholder}\n            onChange={this.onInputChange}\n          />\n          <button type='submit'>\n            <i className='search icon'></i>\n          </button>\n        </div>\n        <p className='error'>{ this.state.error }</p>\n      </form>\n    )\n  }\n} */\n\nconst stateToProps = (state)=>{\n  return{\n    inputValue:state.inputValue,  //Get title input state from store\n  }\n}\n\nconst dispatchToProps = (dispatch)=>{\n  return {\n    inputChange(e){\n      let action = {\n        type: INPUT_CHANGE,\n        value: e.target.value\n      }\n      dispatch(action)\n    },\n    onFormSubmit(event) {\n      let action = {\n        type: SEARCHFORM_SUBMIT,\n        title:this.inputValue.title\n\n      }\n        dispatch(action)\n        console.log('888')\n    }\n  }\n}\n\nexport default connect(stateToProps,dispatchToProps)(SearchInputForm);\n"]},"metadata":{},"sourceType":"module"}