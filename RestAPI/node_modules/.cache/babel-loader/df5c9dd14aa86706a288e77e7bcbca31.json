{"ast":null,"code":"import apiClient from '../apiClient';\nexport const searchRequest = () => ({\n  type: 'SEARCH_REQUEST'\n});\nexport const searchSuccess = payload => ({\n  type: 'SEARCH_SUCCESS',\n  payload: response.data\n});\nexport const searchFailure = error => ({\n  type: 'SEARCH_FAILURE',\n  error\n});\nexport function search(searchtitle) {\n  return dispatch => {\n    dispatch(searchRequest());\n\n    try {\n      apiClient.query(searchtitle).then(response => {\n        dispatch(searchSuccess({\n          response\n        }));\n      });\n    } catch (error) {\n      dispatch(searchFailure(error));\n    }\n\n    ;\n  };\n}","map":{"version":3,"sources":["/Users/Zelda/Redux/Pixabay/2112/src/actions/searchActions.js"],"names":["apiClient","searchRequest","type","searchSuccess","payload","response","data","searchFailure","error","search","searchtitle","dispatch","query","then"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,cAAtB;AAEA,OAAO,MAAMC,aAAa,GAAG,OAAO;AAClCC,EAAAA,IAAI,EAAE;AAD4B,CAAP,CAAtB;AAGP,OAAO,MAAMC,aAAa,GAAIC,OAAD,KAAc;AACzCF,EAAAA,IAAI,EAAE,gBADmC;AACjBE,EAAAA,OAAO,EAACC,QAAQ,CAACC;AADA,CAAd,CAAtB;AAGP,OAAO,MAAMC,aAAa,GAAIC,KAAD,KAAY;AACvCN,EAAAA,IAAI,EAAE,gBADiC;AACfM,EAAAA;AADe,CAAZ,CAAtB;AAIP,OAAO,SAASC,MAAT,CAAgBC,WAAhB,EAA4B;AACjC,SAAQC,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACV,aAAa,EAAd,CAAR;;AACA,QAAI;AAACD,MAAAA,SAAS,CAACY,KAAV,CAAgBF,WAAhB,EACAG,IADA,CACKR,QAAQ,IAAI;AAChBM,QAAAA,QAAQ,CAACR,aAAa,CAAC;AAACE,UAAAA;AAAD,SAAD,CAAd,CAAR;AACD,OAHA;AAGE,KAHP,CAGQ,OAAOG,KAAP,EAAc;AACpBG,MAAAA,QAAQ,CAACJ,aAAa,CAACC,KAAD,CAAd,CAAR;AACD;;AAAA;AACD,GARF;AASA","sourcesContent":["import apiClient from '../apiClient';\n\nexport const searchRequest = () => ({\n  type: 'SEARCH_REQUEST'\n});\nexport const searchSuccess = (payload) => ({\n  type: 'SEARCH_SUCCESS', payload:response.data\n});\nexport const searchFailure = (error) => ({\n  type: 'SEARCH_FAILURE', error\n});\n\nexport function search(searchtitle){\n  return (dispatch) => {\n    dispatch(searchRequest());\n    try {apiClient.query(searchtitle)\n        .then(response => {\n          dispatch(searchSuccess({response}));\n        })} catch (error) {\n      dispatch(searchFailure(error));\n    };\n   }\n }\n"]},"metadata":{},"sourceType":"module"}