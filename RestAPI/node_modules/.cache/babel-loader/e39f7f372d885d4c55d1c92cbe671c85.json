{"ast":null,"code":"import apiClient from '../apiClient'; // save favorite actions\n\nexport const saveColletionSuccess = collection => ({\n  type: 'SAVE_COLLECTION_SUCCESS',\n  collection\n});\nexport const saveCollectionFailure = error => ({\n  type: 'SAVE_COLLECTION_FAILURE',\n  error\n});\nexport const resetSaveCollectionStatus = () => ({\n  type: 'RESET_SAVE_COLLECTION'\n}); // get all favorites actions\n\nexport const getAllSuccess = collections => ({\n  type: 'GET_COLLECTION_SUCCESS',\n  collections\n});\nexport const getAllFailure = error => ({\n  type: 'GET_COLLECTIONS_FAILURE',\n  error\n}); // delete favorite actions\n\nexport const deleteCollectionSuccess = pictureID => ({\n  type: 'DELETE_COLLECTION_SUCCESS',\n  pictureID\n});\nexport const deleteCollectionError = () => ({\n  type: 'DELETE_COLLECTION_ERROR'\n});\nexport const resetDeleteCollectionStatus = () => ({\n  type: 'RESET_DELETE_COLLECTION'\n}); // CRUD API call actions\n\nexport function save(picture) {\n  return dispatch => {\n    apiClient.saveCollection(picture).then(res => {\n      dispatch(saveColletionSuccess(res.data));\n    }).catch(err => {\n      dispatch(saveCollectionFailure(err.response.data));\n    });\n  };\n}\nexport function getAll() {\n  return dispatch => {\n    apiClient.getAllCollections().then(res => {\n      dispatch(getAllSuccess(res.data));\n    }).catch(err => {\n      dispatch(getAllFailure(err.response.data));\n    });\n  };\n}\nexport function deleteCollection(pictureID) {\n  return dispatch => {\n    apiClient.deleteCollection(pictureID).then(res => {\n      dispatch(deleteCollectionSuccess(pictureID));\n    }).catch(err => {\n      dispatch(deleteCollectionError(err.response.data));\n    });\n  };\n}","map":{"version":3,"sources":["/Users/Zelda/Redux/Pixabay/2112/src/actions/collectionActions.js"],"names":["apiClient","saveColletionSuccess","collection","type","saveCollectionFailure","error","resetSaveCollectionStatus","getAllSuccess","collections","getAllFailure","deleteCollectionSuccess","pictureID","deleteCollectionError","resetDeleteCollectionStatus","save","picture","dispatch","saveCollection","then","res","data","catch","err","response","getAll","getAllCollections","deleteCollection"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,cAAtB,C,CAEA;;AACA,OAAO,MAAMC,oBAAoB,GAAIC,UAAD,KAAiB;AACnDC,EAAAA,IAAI,EAAE,yBAD6C;AAClBD,EAAAA;AADkB,CAAjB,CAA7B;AAIP,OAAO,MAAME,qBAAqB,GAAIC,KAAD,KAAY;AAC/CF,EAAAA,IAAI,EAAE,yBADyC;AACdE,EAAAA;AADc,CAAZ,CAA9B;AAIP,OAAO,MAAMC,yBAAyB,GAAG,OAAO;AAC9CH,EAAAA,IAAI,EAAE;AADwC,CAAP,CAAlC,C,CAIP;;AACA,OAAO,MAAMI,aAAa,GAAIC,WAAD,KAAkB;AAC7CL,EAAAA,IAAI,EAAE,wBADuC;AACbK,EAAAA;AADa,CAAlB,CAAtB;AAIP,OAAO,MAAMC,aAAa,GAAIJ,KAAD,KAAY;AACvCF,EAAAA,IAAI,EAAE,yBADiC;AACNE,EAAAA;AADM,CAAZ,CAAtB,C,CAIP;;AACA,OAAO,MAAMK,uBAAuB,GAAIC,SAAD,KAAgB;AACrDR,EAAAA,IAAI,EAAE,2BAD+C;AAClBQ,EAAAA;AADkB,CAAhB,CAAhC;AAIP,OAAO,MAAMC,qBAAqB,GAAG,OAAO;AAC1CT,EAAAA,IAAI,EAAE;AADoC,CAAP,CAA9B;AAIP,OAAO,MAAMU,2BAA2B,GAAG,OAAO;AAChDV,EAAAA,IAAI,EAAE;AAD0C,CAAP,CAApC,C,CAIP;;AACA,OAAO,SAASW,IAAT,CAAcC,OAAd,EAAuB;AAC5B,SAAQC,QAAD,IAAc;AACnBhB,IAAAA,SAAS,CAACiB,cAAV,CAAyBF,OAAzB,EACGG,IADH,CACQC,GAAG,IAAI;AACXH,MAAAA,QAAQ,CAACf,oBAAoB,CAACkB,GAAG,CAACC,IAAL,CAArB,CAAR;AACD,KAHH,EAIGC,KAJH,CAISC,GAAG,IAAI;AACZN,MAAAA,QAAQ,CAACZ,qBAAqB,CAACkB,GAAG,CAACC,QAAJ,CAAaH,IAAd,CAAtB,CAAR;AACD,KANH;AAOD,GARD;AASD;AAED,OAAO,SAASI,MAAT,GAAkB;AACvB,SAAQR,QAAD,IAAc;AACnBhB,IAAAA,SAAS,CAACyB,iBAAV,GACGP,IADH,CACQC,GAAG,IAAI;AACXH,MAAAA,QAAQ,CAACT,aAAa,CAACY,GAAG,CAACC,IAAL,CAAd,CAAR;AACD,KAHH,EAIGC,KAJH,CAISC,GAAG,IAAI;AACZN,MAAAA,QAAQ,CAACP,aAAa,CAACa,GAAG,CAACC,QAAJ,CAAaH,IAAd,CAAd,CAAR;AACD,KANH;AAOD,GARD;AASD;AAED,OAAO,SAASM,gBAAT,CAA0Bf,SAA1B,EAAqC;AAC1C,SAAQK,QAAD,IAAc;AACnBhB,IAAAA,SAAS,CAAC0B,gBAAV,CAA2Bf,SAA3B,EACGO,IADH,CACQC,GAAG,IAAI;AACXH,MAAAA,QAAQ,CAACN,uBAAuB,CAACC,SAAD,CAAxB,CAAR;AACD,KAHH,EAIGU,KAJH,CAISC,GAAG,IAAI;AACZN,MAAAA,QAAQ,CAACJ,qBAAqB,CAACU,GAAG,CAACC,QAAJ,CAAaH,IAAd,CAAtB,CAAR;AACD,KANH;AAOD,GARD;AASD","sourcesContent":["import apiClient from '../apiClient';\n\n// save favorite actions\nexport const saveColletionSuccess = (collection) => ({\n  type: 'SAVE_COLLECTION_SUCCESS', collection\n});\n\nexport const saveCollectionFailure = (error) => ({\n  type: 'SAVE_COLLECTION_FAILURE', error\n});\n\nexport const resetSaveCollectionStatus = () => ({\n  type: 'RESET_SAVE_COLLECTION'\n});\n\n// get all favorites actions\nexport const getAllSuccess = (collections) => ({\n  type: 'GET_COLLECTION_SUCCESS', collections\n});\n\nexport const getAllFailure = (error) => ({\n  type: 'GET_COLLECTIONS_FAILURE', error\n});\n\n// delete favorite actions\nexport const deleteCollectionSuccess = (pictureID) => ({\n  type: 'DELETE_COLLECTION_SUCCESS', pictureID\n});\n\nexport const deleteCollectionError = () => ({\n  type: 'DELETE_COLLECTION_ERROR'\n});\n\nexport const resetDeleteCollectionStatus = () => ({\n  type: 'RESET_DELETE_COLLECTION'\n});\n\n// CRUD API call actions\nexport function save(picture) {\n  return (dispatch) => {\n    apiClient.saveCollection(picture)\n      .then(res => {\n        dispatch(saveColletionSuccess(res.data))\n      })\n      .catch(err => {\n        dispatch(saveCollectionFailure(err.response.data))\n      });\n  }\n}\n\nexport function getAll() {\n  return (dispatch) => {\n    apiClient.getAllCollections()\n      .then(res => {\n        dispatch(getAllSuccess(res.data))\n      })\n      .catch(err => {\n        dispatch(getAllFailure(err.response.data))\n      });\n  }\n}\n\nexport function deleteCollection(pictureID) {\n  return (dispatch) => {\n    apiClient.deleteCollection(pictureID)\n      .then(res => {\n        dispatch(deleteCollectionSuccess(pictureID))\n      })\n      .catch(err => {\n        dispatch(deleteCollectionError(err.response.data))\n      })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}