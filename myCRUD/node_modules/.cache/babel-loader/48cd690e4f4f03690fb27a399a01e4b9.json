{"ast":null,"code":"import _objectSpread from \"/Users/Zelda/Redux/Treasured challenge/crud-redux/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nconst postReducer = (state = [], action) => {\n  switch (action.type) {\n    case 'ADD_POST':\n      return state.concat([action.data]);\n\n    case 'DELETE_POST':\n      return state.filter(post => post.id !== action.id);\n\n    case 'EDIT_POST':\n      return state.map(post => post.id === action.id ? _objectSpread({}, post, {\n        editing: !post.editing\n      }) : post);\n\n    case 'UPDATE':\n      return state.map(post => {\n        if (post.id === action.id) {\n          return _objectSpread({}, post, {\n            title: action.data.newTitle,\n            message: action.data.newMessage,\n            editing: !post.editing\n          });\n        } else return post;\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default postReducer;","map":{"version":3,"sources":["/Users/Zelda/Redux/Treasured challenge/crud-redux/src/reducers/postReducer.js"],"names":["postReducer","state","action","type","concat","data","filter","post","id","map","editing","title","newTitle","message","newMessage"],"mappings":";;AAAA,MAAMA,WAAW,GAAG,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AAC5C,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,UAAL;AACE,aAAOF,KAAK,CAACG,MAAN,CAAa,CAACF,MAAM,CAACG,IAAR,CAAb,CAAP;;AACF,SAAK,aAAL;AACC,aAAOJ,KAAK,CAACK,MAAN,CAAcC,IAAD,IAAQA,IAAI,CAACC,EAAL,KAAYN,MAAM,CAACM,EAAxC,CAAP;;AACA,SAAK,WAAL;AACC,aAAOP,KAAK,CAACQ,GAAN,CAAWF,IAAD,IAAQA,IAAI,CAACC,EAAL,KAAYN,MAAM,CAACM,EAAnB,qBAA4BD,IAA5B;AAAiCG,QAAAA,OAAO,EAAC,CAACH,IAAI,CAACG;AAA/C,WAAwDH,IAA1E,CAAP;;AACF,SAAK,QAAL;AACO,aAAON,KAAK,CAACQ,GAAN,CAAWF,IAAD,IAAQ;AACvB,YAAGA,IAAI,CAACC,EAAL,KAAYN,MAAM,CAACM,EAAtB,EAA0B;AACxB,mCACMD,IADN;AAEGI,YAAAA,KAAK,EAACT,MAAM,CAACG,IAAP,CAAYO,QAFrB;AAGGC,YAAAA,OAAO,EAACX,MAAM,CAACG,IAAP,CAAYS,UAHvB;AAIGJ,YAAAA,OAAO,EAAE,CAACH,IAAI,CAACG;AAJlB;AAMD,SAPD,MAOO,OAAOH,IAAP;AACR,OATM,CAAP;;AAUP;AACE,aAAON,KAAP;AAnBN;AAqBC,CAtBD;;AAuBA,eAAeD,WAAf","sourcesContent":["const postReducer = (state = [], action) => {\nswitch(action.type) {\n    case 'ADD_POST':\n      return state.concat([action.data]);\n    case 'DELETE_POST':\n     return state.filter((post)=>post.id !== action.id);\n     case 'EDIT_POST':\n      return state.map((post)=>post.id === action.id ? {...post,editing:!post.editing}:post)\n    case 'UPDATE':\n           return state.map((post)=>{\n             if(post.id === action.id) {\n               return {\n                  ...post,\n                  title:action.data.newTitle,\n                  message:action.data.newMessage,\n                  editing: !post.editing\n               }\n             } else return post;\n           })\n    default:\n      return state;\n  }\n}\nexport default postReducer;\n"]},"metadata":{},"sourceType":"module"}