{"ast":null,"code":"import _objectSpread from \"/Users/Zelda/Redux/myCRUD/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nconst skillReducer = (state = [], action) => {\n  switch (action.type) {\n    case 'ADD_SKILL':\n      return state.concat([action.data]);\n\n    case 'DELETE_SKILL':\n      return state.filter(skill => skill.id !== action.id);\n\n    case 'EDIT_SKILL':\n      return state.map(skill => skill.id === action.id ? _objectSpread({}, skill, {\n        editing: !skill.editing\n      }) : skill);\n\n    case 'UPDATE':\n      return state.map(skill => {\n        if (skill.id === action.id) {\n          return _objectSpread({}, skill, {\n            title: action.data.newTitle,\n            message: action.data.newMessage,\n            editing: !skill.editing\n          });\n        } else return skill;\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default skillReducer;","map":{"version":3,"sources":["/Users/Zelda/Redux/myCRUD/src/reducers/skillReducer.js"],"names":["skillReducer","state","action","type","concat","data","filter","skill","id","map","editing","title","newTitle","message","newMessage"],"mappings":";;AAAA,MAAMA,YAAY,GAAG,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AAC7C,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,WAAL;AACE,aAAOF,KAAK,CAACG,MAAN,CAAa,CAACF,MAAM,CAACG,IAAR,CAAb,CAAP;;AACF,SAAK,cAAL;AACC,aAAOJ,KAAK,CAACK,MAAN,CAAcC,KAAD,IAASA,KAAK,CAACC,EAAN,KAAaN,MAAM,CAACM,EAA1C,CAAP;;AACA,SAAK,YAAL;AACC,aAAOP,KAAK,CAACQ,GAAN,CAAWF,KAAD,IAASA,KAAK,CAACC,EAAN,KAAaN,MAAM,CAACM,EAApB,qBAA6BD,KAA7B;AAAmCG,QAAAA,OAAO,EAAC,CAACH,KAAK,CAACG;AAAlD,WAA2DH,KAA9E,CAAP;;AACF,SAAK,QAAL;AACO,aAAON,KAAK,CAACQ,GAAN,CAAWF,KAAD,IAAS;AACxB,YAAGA,KAAK,CAACC,EAAN,KAAaN,MAAM,CAACM,EAAvB,EAA2B;AACzB,mCACMD,KADN;AAEGI,YAAAA,KAAK,EAACT,MAAM,CAACG,IAAP,CAAYO,QAFrB;AAGGC,YAAAA,OAAO,EAACX,MAAM,CAACG,IAAP,CAAYS,UAHvB;AAIGJ,YAAAA,OAAO,EAAE,CAACH,KAAK,CAACG;AAJnB;AAMD,SAPD,MAOO,OAAOH,KAAP;AACR,OATM,CAAP;;AAUP;AACE,aAAON,KAAP;AAnBN;AAqBC,CAtBD;;AAuBA,eAAeD,YAAf","sourcesContent":["const skillReducer = (state = [], action) => {\nswitch(action.type) {\n    case 'ADD_SKILL':\n      return state.concat([action.data]);\n    case 'DELETE_SKILL':\n     return state.filter((skill)=>skill.id !== action.id);\n     case 'EDIT_SKILL':\n      return state.map((skill)=>skill.id === action.id ? {...skill,editing:!skill.editing}:skill)\n    case 'UPDATE':\n           return state.map((skill)=>{\n             if(skill.id === action.id) {\n               return {\n                  ...skill,\n                  title:action.data.newTitle,\n                  message:action.data.newMessage,\n                  editing: !skill.editing\n               }\n             } else return skill;\n           })\n    default:\n      return state;\n  }\n}\nexport default skillReducer;\n"]},"metadata":{},"sourceType":"module"}